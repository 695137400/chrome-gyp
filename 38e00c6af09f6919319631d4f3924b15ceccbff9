{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "329e20f5_4d69479b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001077
      },
      "writtenOn": "2024-04-02T06:32:44Z",
      "side": 1,
      "message": "LGTM. Thank you for supporting Python3.",
      "revId": "38e00c6af09f6919319631d4f3924b15ceccbff9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8aff021c_5b014bfc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1373732
      },
      "writtenOn": "2024-04-12T19:32:36Z",
      "side": 1,
      "message": "I\u0027ve run into a series of roadblocks trying to test this properly -- the automated tests seem to expect i386 to be a target that works on macOS and produces binaries that a Mac is willing to run, neither of which appears to be true; I successfully configured an old Mac SDK in my build (thanks for the help, Mark!) but then the tests fail with various \"bad CPU architecture\" errors and also report unexpectedly non-empty `stderr` from various build processes that (correctly) report warnings that antequated Xcode features are being ignored.\n\nIs there some set of flags that trims the tests down to something that can wort of work on an M1 Mac, is there some other test system I can reasonably engage other than my manually poking at it, or would this need massive rewriting and I have to either drop the CL or just hope that my small-scale manual poking at it (without a strong background in `gyp`) was good enough?",
      "revId": "38e00c6af09f6919319631d4f3924b15ceccbff9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}